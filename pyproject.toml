[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "arena"
version = "0.0.1"
description = "ARENA AI safety curriculum with MAIA"
authors = [
  { name = "Gatlen Culp" },
]
license = { file = "LICENSE" }
readme = {file = "README.md", content-type = "text/markdown"}
classifiers = [
    "Private :: Do Not Upload",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License"
]
requires-python = ">=3.10,<3.13"

dependencies = [
    "loguru>=0.7.3",         # Better logging
    "plotly>=5.24.1",        # Interactive plotting
    "pydantic>=2.10.3",      # Data validation
    "rich>=13.9.4",          # Rich terminal output
    "numpy>=1.26.4",         # Numerical computing
    "python-dotenv>=1.0.0"   # Load .env into environment vars
]

[dependency-groups]
ai-apps = [  # AI application development packages
    "ell-ai>=0.0.15",        # AI toolkit
    "langchain>=0.3.12",     # LLM application framework
    # "megaparse>=0.0.45",     # Advanced text parsing (TODO: Requires Python 3.10+)
]
ai-train = [  # Machine learning and model training packages
    "datasets>=2.17.1",           # Dataset handling
    "einops>=0.7.0",            # Tensor operations
    "jaxtyping>=0.2.36",        # Type hints for JAX
    "onnx>=1.17.0",             # ML model interoperability
    "pytorch-lightning>=2.0.0",  # PyTorch training framework
    "ray[tune]>=2.40.0",        # Distributed computing
    "safetensors>=0.4.5",       # Safe tensor serialization
    "scikit-learn>=1.6.0",      # Traditional ML algorithms
    # "shap>=0.46.0",             # Model explainability
    "torch>=2.0.0",             # Deep learning framework
    "transformers>=4.47.0",     # Transformer models
    # "umap-learn>=0.5.7",        # Dimensionality reduction
    "wandb>=0.19.1",            # Experiment tracking
    "nnsight>=0.3.7",           # ML Interp and Manipulation
]
async = [  # Asynchronous programming
    "uvloop>=0.21.0",           # Fast event loop implementation
]
cli = [  # Command-line interface tools
    # "typer>=0.15.1",            # CLI builder
    "typer>=0.12.0",            # CLI builder
]
cloud = [  # Cloud infrastructure tools
    # "ansible>=11.1.0",         # Infrastructure automation (# TODO: Doesn't work for Python 3.10)
    "boto3>=1.35.81",          # AWS SDK
]
config = [  # Configuration management
    "cookiecutter>=2.6.0",      # Project templating
    "gin-config>=0.5.0",        # Config management
    "jinja2>=3.1.4",           # Template engine
]
data = [  # Data processing and storage
    "dagster>=1.9.5",           # Data orchestration
    "duckdb>=1.1.3",           # Embedded analytics database
    # "lancedb>=0.17.0",         # Vector database (TODO: Figure out install error)
    "networkx>=3.4.2",         # Graph operations
    "orjson>=3.10.12",         # Fast JSON parsing
    "pillow>=10.4.0",          # Image processing
    "polars>=1.17.0",          # Fast dataframes
    # "pygwalker>=0.4.9.13",     # Data visualization (TODO: Figure out install error)
    "sqlmodel>=0.0.22",        # SQL ORM
    "tomli>=2.0.1",            # TOML parsing
]
dev = [  # Development tools
    "better-exceptions>=0.3.3", # Improved error messages
    "cruft>=2.15.0",           # Project template management
    "faker>=33.1.0",           # Fake data generation
    "hypothesis>=6.122.3",     # Property-based testing
    "pip>=24.3.1",             # Package installer
    "polyfactory>=2.18.1",     # Test data factory
    "pyinstrument>=5.0.0",     # Profiler
    # "pyprojectsort>=0.3.0",    # pyproject.toml sorter (TODO: Find replacement)
    "pyright>=1.1.390",        # Static type checker
    "pytest-cases>=3.8.6",     # Parametrized testing
    "pytest-cov>=6.0.0",       # Coverage reporting
    "pytest-icdiff>=0.9",      # Improved diffs
    "pytest-mock>=3.14.0",     # Mocking
    "pytest-playwright>=0.6.2", # Browser testing
    "pytest-profiling>=1.8.1", # Test profiling
    "pytest-random-order>=1.1.1", # Randomized test order
    "pytest-shutil>=1.8.1",    # File system testing
    "pytest-split>=0.10.0",    # Parallel testing
    "pytest-sugar>=1.0.0",     # Test progress visualization
    "pytest-timeout>=2.3.1",   # Test timeouts
    "pytest>=8.3.4",           # Testing framework
    "ruff>=0.8.3",             # Fast Python linter
    "taplo>=0.9.3",            # TOML toolkit
    "tox>=4.23.2",             # Test automation
    "uv>=0.5.7",               # Fast pip replacement
]
dev-doc = [  # Documentation tools
    "mdformat>=0.7.19",        # Markdown formatter
    "mkdocs-material>=9.5.48", # Documentation theme
    "mkdocs>=1.6.1",          # Documentation generator
]
dev-nb = [  # Notebook development tools
    "jupyter-book>=1.0.3",     # Notebook publishing
    "nbformat>=5.10.4",        # Notebook file format
    "nbqa>=1.9.1",             # Notebook linting
    "testbook>=0.4.2",         # Notebook testing
]
gui = [  # Graphical interface tools
    "streamlit>=1.41.1",       # Web app framework
]
misc = [  # Miscellaneous utilities
    "boltons>=24.1.0",         # Python utilities
    "cachetools>=5.5.0",       # Caching utilities
    "wrapt>=1.17.0",           # Decorator utilities
]
nb = [  # Jupyter notebook tools
    "chime>=0.7.0",            # Sound notifications
    "ipykernel>=6.29.5",       # Jupyter kernel
    "ipython>=7.34.0",         # Interactive Python shell
    "ipywidgets>=8.1.5",       # Jupyter widgets
    "jupyterlab>=4.3.3",       # Notebook IDE
]
web = [  # Web development and scraping
    "beautifulsoup4>=4.12.3",  # HTML parsing
    "fastapi>=0.115.6",        # Web framework
    "playwright>=1.49.1",      # Browser automation
    "requests>=2.32.3",        # HTTP client
    "scrapy>=2.12.0",          # Web scraping
    "uvicorn>=0.33.0",         # ASGI server
    # "zrok>=0.4.42",            # Tunnel service (# TODO: Requires 3.10+)
]
arena = [ # Arena Required
    "accelerate>=1.2.1",
    "anthropic>=0.42.0",
    "circuitsvis",
    "diffusers>=0.32.1",
    "eindex-callum>=0.1.2",
    "einops>=0.7.0",
    "frozendict>=2.4.6",
    "ftfy>=6.3.1",
    "gdown>=5.2.0",
    "gymnasium[accept-rom-license,atari,mujoco-py,other]>=0.29.0",
    "hdbscan>=0.8.40",
    "huggingface-hub>=0.27.1",
    "imageio-ffmpeg>=0.5.1",
    "inspect-ai>=0.3.56",
    "instructor>=1.7.2",
    "ipykernel>=6.29.5",
    "ipywidgets>=7.7.1",
    "jaxtyping>=0.2.36",
    "jupyter>=1.1.1",
    "jupyterlab-widgets>=1.1.1",
    "matplotlib>=3.10.0",
    "mediapy>=1.2.2",
    "mujoco>=3.2.6",
    "neel-plotly",
    "nnsight>=0.3.5",
    "notebook>=7.3.2",
    "numpy-stl>=3.2.0",
    "openai>=1.56.2",
    "opencv-python>=4.10.0.84",
    "pandas>=2.2.3",
    "plotly>=5.24.1",
    "portalocker>=2.0.0",
    "pre-commit>=4.0.1",
    "pygame>=2.6.1",
    "pytest>=8.3.4",
    "python-dotenv>=1.0.1",
    "requests>=2.32.3",
    "sae-lens>=4.0.0",
    "sae-vis>=0.3.1",
    "safetensors>=0.4.5",
    "scikit-learn>=1.6.0",
    "sentence-transformers>=3.3.1",
    "streamlit>=1.41.1",
    "streamlit-antd-components>=0.2.5",
    "streamlit-image-select>=0.6.0",
    "streamlit-on-hover-tabs>=1.0.1",
    "tabulate>=0.9.0",
    "tiktoken>=0.6.0",
    "torch>=2.5.1",
    "torchaudio>=2.5.1",
    "torchinfo>=1.8.0",
    "torchtext>=0.18.0",
    "torchvision>=0.20.1",
    "tqdm>=4.67.1",
    "transformer-lens>=2.11.0",
    "typeguard>=4.4.1",
    "umap-learn>=0.5.7",
    "wandb>=0.19.1",
    "wikipedia>=1.4.0",
]

# [project.urls]
# Homepage = "https://.github.io/ARENA-2025-IAP/"
# Repository = "https://github.com//ARENA-2025-IAP"
# Documentation = "https://.github.io/ARENA-2025-IAP/"


# ai, web, gui
[tool.uv]
default-groups = ["dev", "nb", "dev-doc", "dev", "dev-nb", "data", "cli", "ai-train", "arena"]

[tool.uv.sources]
torch = [
    { index = "pytorch-cpu", marker = "platform_system == 'Darwin'"},
    { index = "pytorch-cu118", marker = "platform_system != 'Darwin'"}
]
torchvision = [
    { index = "pytorch-cpu", marker = "platform_system == 'Darwin'"},
    { index = "pytorch-cu118", marker = "platform_system != 'Darwin'"}
]
circuitsvis = { git = "https://github.com/callummcdougall/CircuitsVis.git", subdirectory = "python" }
neel-plotly = { git = "https://github.com/neelnanda-io/neel-plotly" }

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"
explicit = true

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 100
extend-exclude = ["*.ipynb"]
exclude = ["ARENA_3.0"]

[tool.ruff.lint]
# TODO: Different groups of linting styles depending on code use.
select = ["ALL"]
ignore = ["COM812", "ISC001"]


[tool.ruff.lint.isort]
known-first-party = ["arena"]
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pycodestyle]
max-doc-length = 99

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
addopts = """
--tb=long
--code-highlight=yes
"""

testpaths = ["tests"]
log_file = "./logs/pytest.log"


[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = true
exclude = '\.venv'

[tool.pyright]
include = ["."]
